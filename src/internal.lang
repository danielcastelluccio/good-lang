def size_of: fn [T = uint](t: type): T = internal "size_of";
def import: fn (path: []byte): mod = internal "import";

def type_info_of: fn (t: type): Type_Info = internal "type_info_of";

def Struct_Item = struct {
	name: []byte,
	type: type
};

def Union_Item = struct {
	name: []byte,
	type: type
};

def Tagged_Union_Item = struct {
	name: []byte,
	type: type
};

def Type_Info = tagged_union {
	Integer: struct {
		size: uint8,
		signed: bool
	},
	Struct: struct {
		members: []Struct_Item
	},
	Union: struct {
		members: []Union_Item
	},
	Tagged_Union: struct {
		members: []Tagged_Union_Item
	},
	Enum: struct {
		values: [][]byte
	},
	Optional: struct {
		type: type
	},
	Array: struct {
		size: uint,
		type: type
	},
	Array_View: struct {
		type: type
	},
	Tuple: struct {
		members: []type
	}
};

def Operating_System = enum {
	LINUX,
	WINDOWS,
	MACOS
};

def operating_system: Operating_System = internal "operating_system";
